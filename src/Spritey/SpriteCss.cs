namespace Spritey
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Spritey.ImageProcessing.Sprites;

    /// <summary>
    /// Helper methods for generating CSS from <see cref="Sprite"/> objects
    /// </summary>
    public static class SpriteCss
    {
        /// <summary>
        /// Generates a string containing CSS classes that represent all the images in the Sprite.
        /// Embeds the sprite within the CSS as a DATA URI. IE8 can only support Data URIs 32 kb or less
        /// Each image in the sprite gets its own class defining that image's X, Y, Height, &amp; Width
        /// within the sprite. The sprite image is also embeded within the css class ".img-sprite"
        /// </summary>
        /// <param name="sprite">The Sprite to generate CSS for</param>
        /// <param name="fmt">The format of the embedded image</param>
        /// <returns>string containing CSS classes</returns>
        public static string GetEmbeddedSpriteCSS(Sprite sprite, SpriteFormat fmt = SpriteFormat.Gif) =>
            GenerateEmbeddedGetSpriteCSS(
                fmt == SpriteFormat.Gif ? "gif" : "png",
                fmt == SpriteFormat.Gif ? sprite.Gif.AsBase64 : sprite.Png.AsBase64,
                GenerateClassString(sprite.ImageData));

        /// <summary>
        /// Generates a string containing CSS classes that represent all the images in the Sprite.
        /// References the sprite within the CSS as url.
        /// Each image in the sprite gets its own class defining that image's X, Y, Height, &amp; Width
        /// within the sprite. The sprite image is also embeded within the css class ".img-sprite"
        /// </summary>
        /// <param name="sprite">The Sprite to generate CSS for</param>
        /// <param name="name">The name of the image</param>
        /// <param name="fmt">The format of the external image</param>
        /// <returns>string containing CSS classes</returns>
        public static string GetReferencedSpriteCSS(Sprite sprite, string name, SpriteFormat fmt = SpriteFormat.Gif) =>
            GenerateReferencedSpriteCSS(
                fmt == SpriteFormat.Gif ? "gif" : "png",
                name,
                GenerateClassString(sprite.ImageData));

        private static string GenerateEmbeddedGetSpriteCSS(string imageType, string base64Sprite, string classes) =>
            $".img-sprite{{background: transparent url(data:image/{imageType};base64,{base64Sprite});}}{Environment.NewLine}" +
            $"i.img-sprite{{display:inline-block;}}{Environment.NewLine}" +
            $"{classes}";

        private static string GenerateReferencedSpriteCSS(string imageType, string imageName, string classes) =>
            $".img-sprite{{background: transparent url({imageName}.{imageType});}}{Environment.NewLine}" +
            $"i.img-sprite{{display:inline-block;}}{Environment.NewLine}" +
            $"{classes}";

        /// <summary>
        /// Generates a string of css classes based on the ImageNames in the SpriteBlueprint
        /// Image names are determined by the original image's physical file name.
        /// </summary>
        /// <param name="imageData">A blueprint detailing the layout of the Sprite Image</param>
        /// <returns>A string of css classes</returns>
        private static string GenerateClassString(IEnumerable<ISpriteData> imageData) =>
            imageData.Aggregate(
                new StringBuilder(),
                (builder, data) => builder.Append(
                    $".img-sprite.img-{data.Name}{{height:{data.Height}px;width:{data.Width}px;background-position: -{data.Top}px -{data.Left}px;}}{Environment.NewLine}"))
            .ToString();

        ///// <summary>
        ///// Generates a sample HTML page to display the sprite and all its individual images
        ///// </summary>
        ///// <param name="sprite">A blueprint detailing the layout of the Sprite Image</param>
        ///// <param name="sSpriteCSSPath">Path to the CSS file containing the class list generated by GetSpriteCss</param>
        ///// <param name="sImageDirectoryPath">Path to the image files that the sprite was generated from. This is used here to determine images that have been excluded from the sprite.</param>
        ///// <param name="sWebImageDirectoryPath">Web path to the image files that the sprite was generated from. This is used here to display the images that have been excluded from the sprite.</param>
        ///// <returns>
        ///// A string containing HTML that can be used to display all the available sprites.
        ///// </returns>
        // public static string GetSpriteTestHTML(SpriteBlueprint sprite, string sSpriteCSSPath,
        //    string sImageDirectoryPath, string sWebImageDirectoryPath)
        // {
        //    StringBuilder builder = new StringBuilder();
        //    builder
        //        .Append("<!DOCTYPE ><html><head><link rel='stylesheet' href='")
        //        .Append(sSpriteCSSPath)
        //        .Append("' /><style>")
        //        .Append(@"span.img-sprite{vertical-align:middle;}
        //                span.img-sprite-container{display:inline-block;width:175px;}
        //                code, h1{font-family:'bitstream vera sans mono', 'andale mono', 'lucida console', monospace; color:#393939;}
        //                code, span.img-sprite-container{line-height:20px;}
        //                div.img-section{background-color:#DDD; border:solid 1px gray;margin-bottom:10px;}")
        //        .Append("</style></head><body>")
        //        .Append("<h1>Sprite</h1>")
        //        .Append("<div class='img-sprite' style='height:")
        //        .Append(sprite.Height).Append("px;")
        //        .Append("width:").Append(sprite.Width).Append("px;'")
        //        .Append(">&nbsp;</div><br/>").Append(Environment.NewLine);

        // builder.Append("<h1>Included Images</h1>");
        //    foreach (IMappedImageInfo minfo in sprite.MappedImages)
        //    {
        //        ImageInfo info = ((ImageInfo)minfo.ImageInfo);
        //        builder
        //           .Append("<div class='img-section'><span class='img-sprite-container'><span class='img-sprite ")
        //           .Append(info.Name)
        //           .Append("'>&nbsp;</span></span><code>class='<b>img-sprite ")
        //           .Append(info.Name)
        //           .Append("</b>' ")
        //           .Append("width:<b>").Append(info.Width).Append("</b>px;")
        //           .Append(" height:<b>").Append(info.Height).Append("</b>px;")
        //           .Append("</code></div>").Append(Environment.NewLine);
        //    }

        // // We know that the animated images are the ones that are currently excluded...
        //    builder.Append("<h1>Excluded Images</h1>");
        //    List<ImageInfo> excludedImages = ImageInfo.GetAnimatedFromImageDirectory(sImageDirectoryPath);
        //    foreach (ImageInfo info in excludedImages)
        //    {
        //        builder
        //           .Append("<div class='img-section'><span class='img-sprite-container'>")
        //           .Append("<img src='")
        //           .Append(sWebImageDirectoryPath)
        //           .Append(Path.GetFileName(info.Filename))
        //           .Append("'/>&nbsp;</span><code>file='<b>")
        //           .Append(Path.GetFileName(info.Filename))
        //           .Append("</b>' ")
        //           .Append("width:<b>").Append(info.Width).Append("</b>px;")
        //           .Append(" height:<b>").Append(info.Height).Append("</b>px;")
        //           .Append("</code></div>").Append(Environment.NewLine);
        //    }
        //    excludedImages.DisposeAll();

        // builder.Append("</body></html>");
        //    return builder.ToString();
        // }
    }
}
