# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

jobs:
- job: Windows

  pool:
    vmImage: 'vs2017-win2016'

  variables:
    buildConfiguration: 'Release'

  steps:
  #- script: |
  #    pwsh -c '.\UpdateBuildVersion.ps1'
  #  displayName: 'Build and Test'
  - task: gittools.gitversion.gitversion-task.GitVersion@4
    displayName: GitVersion
    inputs:
      updateAssemblyInfo: true
      preferBundledVersion: false
  - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
    displayName: 'Prepare analysis on SonarQube'
    inputs:
      SonarQube: SonarQube.io
      projectKey: 'BrandonBoone_Spritey'
      projectName: Spritey
      projectVersion: '$(GitVersion.SemVer)'
      extraProperties: |
        sonar.organization=brandonboone-github
        sonar.branch.name=$(Build.SourceBranchName)
  - script: dotnet restore Spritey.sln
    displayName: Restore Spritey.sln
  - script: dotnet build ./src/Spritey/Spritey.csproj
    displayName: Build Spritey.sln
  - task: NuGetCommand@2
    displayName: Restore Code Coverage Artifacts
    inputs:
      command: restore
      restoreSolution: './tests/CodeCoverage/packages.config'
      restoreDirectory: 'packages'
  - script: tests\CodeCoverage\packages\OpenCover.4.6.519\tools\OpenCover.Console.exe -target:"dotnet.exe" -targetargs:"test tests\Spritey.Test\Spritey.Test.csproj -c Release -f netcoreapp2.1 /p:codecov=true" -register:user -threshold:10 -oldStyle -safemode:off -output:.\Spritey.Coverage.xml -hideskipped:All -returntargetcode
    displayName: Run Tests and Generate Coverage Report
  - script: tests\CodeCoverage\packages\Codecov.1.1.0\tools\codecov.exe -f Spritey.Coverage.xml -t $(CODECOV_TOKEN)
    displayName: Publish Coverage Results to CodeCov
  - task: SonarSource.sonarqube.6D01813A-9589-4B15-8491-8164AEB38055.SonarQubeAnalyze@4
    displayName: 'Run Code Analysis'

- job: Linux

  pool:
    vmImage: 'Ubuntu 16.04'

  variables:
    buildConfiguration: 'Release'

  steps:
  -script: |
      sudo apt-get install mono-complete
      sudo apt-get install libcurl3
    displayName: Install mono-complete and libcurl3
  #- script: |
  #    curl <a class="vglnk" href="https://packages.microsoft.com/keys/microsoft.asc" rel="nofollow"><span>https</span><span>://</span><span>packages</span><span>.</span><span>microsoft</span><span>.</span><span>com</span><span>/</span><span>keys</span><span>/</span><span>microsoft</span><span>.</span><span>asc</span></a> | sudo apt-key add -
  #    curl <a class="vglnk" href="https://packages.microsoft.com/config/ubuntu/16.04/prod.list" rel="nofollow"><span>https</span><span>://</span><span>packages</span><span>.</span><span>microsoft</span><span>.</span><span>com</span><span>/</span><span>config</span><span>/</span><span>ubuntu</span><span>/</span><span>16</span><span>.</span><span>04</span><span>/</span><span>prod</span><span>.</span><span>list</span></a> | sudo tee /etc/apt/sources.list.d/microsoft.list
  #    sudo apt-get update
  #    sudo apt-get install -y powershell
  #  displayName: 'Install PowerShell Core'
  - task: gittools.gitversion.gitversion-task.GitVersion@4
    displayName: GitVersion
    inputs:
      updateAssemblyInfo: true
      preferBundledVersion: false
  - script: dotnet restore Spritey.sln
    displayName: Restore Spritey.sln
  - script: dotnet build ./src/Spritey/Spritey.csproj
    displayName: Build Spritey.sln
  - script: dotnet test ./tests/Spritey.Test/Spritey.Test.csproj --configuration $(buildConfiguration) --framework netcoreapp2.1 --logger trx
    displayName: Run Tests and Generate Report
  - task: PublishTestResults@2
    displayName: Publish Test Report
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
